{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **cs3102 Fall 2019**\n",
    "\n",
    "## Problem Set 4 (Jupyter Part): Computing Models and Universality\n",
    "\n",
    "   \n",
    "**Purpose**  \n",
    "The goal of this part of Problem Set 4 is to develop your understanding of universality by building the EVAL function discussed in Class 9. For better readability, we will be using some simple data structures (tuples and lists) throughout this notebook. To make this as formal as the algorithm discussed in class, you should \"flatten\" each of these datastructures (convert them into a bitstring by just listing all of the contained bits in order).\n",
    "\n",
    "Note: you should not use any loops in this notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NAND and Procedures\n",
    "\n",
    "We begin by giving you NAND. The asserts ensure that we only work with 0s and 1s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def checkBoolean(b):\n",
    "    \"\"\"Tests a value is a valid Boolean. We use the int values 0 and 1 to represent \n",
    "    Boolean False and True. (Technically, checkBoolean should not be allowed in a \n",
    "    \"straightline\" program since it is a function call, but we are just using it to\n",
    "    check assertions.)\n",
    "    \"\"\"\n",
    "    assert b == 0 or b == 1\n",
    "    \n",
    "def NAND(a,b):\n",
    "    checkBoolean(a)\n",
    "    checkBoolean(b)\n",
    "    return 1 - (a * b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert(NAND(0, 0) == 1)\n",
    "assert(NAND(0, 1) == 1)\n",
    "assert(NAND(1, 0) == 1)\n",
    "assert(NAND(1, 1) == 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we provide several of the boolean functions we've discussed so far. You're welcome to use any of these throughout this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def NOT(a):\n",
    "    checkBoolean(a)\n",
    "    return NAND(a, a)\n",
    "\n",
    "def AND(a, b):\n",
    "    checkBoolean(a)\n",
    "    checkBoolean(b)\n",
    "    temp = NAND(a, b)\n",
    "    return NAND(temp, temp)\n",
    "\n",
    "def OR(a, b):\n",
    "    checkBoolean(a)\n",
    "    checkBoolean(b)\n",
    "    temp1 = NAND(a,a)\n",
    "    temp2 = NAND(b,b)\n",
    "    return NAND(temp1, temp2)\n",
    "\n",
    "def XOR(a, b):\n",
    "    checkBoolean(a)\n",
    "    checkBoolean(b)\n",
    "    or_ab = OR(a, b)\n",
    "    and_ab = AND(a, b)\n",
    "    not_and_ab = NOT(and_ab)\n",
    "    return AND(or_ab, not_and_ab)\n",
    "\n",
    "def IF(cond,a,b):\n",
    "    checkBoolean(cond)\n",
    "    checkBoolean(a)\n",
    "    checkBoolean(b)\n",
    "    \n",
    "    not_cond = NAND(cond, cond)\n",
    "    temp1 = NAND(cond, a)\n",
    "    temp2 = NAND(not_cond, b)\n",
    "    return NAND(temp1, temp2)\n",
    "\n",
    "def LOOKUP1(x0, x1, i0):\n",
    "    [checkBoolean(x) for x in (x0, x1, i0)] # not strightline code, but just checking\n",
    "    return IF(i0, x1, x0)\n",
    "\n",
    "def LOOKUP2(x0,x1,x2,x3,i0,i1):\n",
    "    [checkBoolean(x) for x in (x0, x1, x2, x3, i0, i1)] # just checking\n",
    "    first_half = LOOKUP1(x0, x1, i1)\n",
    "    second_half = LOOKUP1(x2, x3, i1)\n",
    "    return IF(i0, second_half, first_half)\n",
    "\n",
    "def LOOKUP3(x0,x1,x2,x3,x4,x5,x6,x7,i0,i1,i2):\n",
    "    [checkBoolean(x) for x in (x0, x1, x2, x3, x4, x5, x6, x7, i0, i1, i2)] # just checking\n",
    "    first_half = LOOKUP2(x0, x1, x2, x3, i1, i2)\n",
    "    second_half = LOOKUP2(x4, x5, x6, x7, i1, i2)\n",
    "    return IF(i0, second_half, first_half)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Representing a program as bits\n",
    "\n",
    "Next we represent the `IF` program as a list of triples. For readability, we'll write this as integers, and convert to bits.\n",
    "\n",
    "This first cell provides two functions for converting triples of integers into triples of bitstrings. You should understand why they exist."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "def int2bits(number, num_bits):\n",
    "    binary = tuple()\n",
    "    for i in range(num_bits):\n",
    "        bit = number % 2\n",
    "        number = number // 2\n",
    "        binary = tuple([bit]) + binary\n",
    "    return binary\n",
    "\n",
    "def prog2bits(prog, num_bits):\n",
    "    bits_prog = []\n",
    "    for triple in prog:\n",
    "        bits0 = int2bits(triple[0], num_bits)\n",
    "        bits1 = int2bits(triple[1], num_bits)\n",
    "        bits2 = int2bits(triple[2], num_bits)\n",
    "        triple_bits = (bits0,bits1,bits2)\n",
    "        bits_prog.append(triple_bits)\n",
    "    return bits_prog"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we give `IF` as a list of triples. It is first given as a list of triples of integers, then converted into a list of triples of 3-bit strings.\n",
    "\n",
    "Note that this program has 3 inputs, 1 output, 7 variables (including those 3 inputs and 1 output), and 4 lines of code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The IF program represented as triples of bitstrings:\n",
      "[((0, 1, 1), (0, 0, 0), (0, 0, 0)), ((1, 0, 0), (0, 0, 0), (0, 0, 1)), ((1, 0, 1), (0, 1, 1), (0, 1, 0)), ((1, 1, 0), (1, 0, 0), (1, 0, 1))]\n"
     ]
    }
   ],
   "source": [
    "if_program = [(3,0,0),(4,0,1),(5,3,2),(6,4,5)]\n",
    "\n",
    "if_program = prog2bits(if_program, 3)\n",
    "\n",
    "print(\"The IF program represented as triples of bitstrings:\")\n",
    "print(if_program)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the remainder of this notebook we will build and use the `EVAL_3_7_4_1` function for NAND programs with 3 input bits, 7 internal variables, 4 lines, and 1 output bit. As mentioned in Class 9, to do EVAL we will have a table we called `T` that will contain the value of all the variables throughout our evaluation (row `i` of `T` will contain the value of variable `i`), note that the length of `T` should therefore be equal to the number of variables in the program (in this case 7). To find the value of a variable, we mentioned the function `GET`, which was very similar to lookup. \n",
    "\n",
    "**Problem J1.** Implement the function `GET_7` below, which will index into the table `T` of 7 rows (since the programs we're evaluating will have 7 variables). You may use `LOOKUP`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jolly good!\n",
      "Cheerio!\n"
     ]
    }
   ],
   "source": [
    "def GET_7(T, i):\n",
    "    assert(len(T) == 7) # not straightline, just checking\n",
    "    assert(len(i) == 3) # not straightline, just checking\n",
    "    # gives the value of the variable indexed by the length 3 bitstring from a 6-bit table\n",
    "    \n",
    "    #TODO: Replace the body of this function to implement GET_7 correctly\n",
    "    \n",
    "    return 0\n",
    "\n",
    "T = (0,0,0,1,0,0,0)\n",
    "i = (0,1,1)\n",
    "assert(GET_7(T,i) == 1)\n",
    "print(\"Jolly good!\")\n",
    "    \n",
    "T = (1,1,1,1,0,1,1)\n",
    "i = (1,0,0)\n",
    "assert(GET_7(T,i) == 0)\n",
    "print(\"Cheerio!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use `GET` to retrieve one element from the table `T`. We will use `UPDATE` to change one of the elements from table `T`. Before we can implement `UPDATE`, we will want to implement an `EQUAL_3` function. This will determine whether two given 3-bit numbers are equal\n",
    "\n",
    "**Problem J2.** Implement the function `EQUAL_3` below, which will return 1 if two given 3-bit numbers are the same, and 0 otherwise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Huzzah!\n"
     ]
    }
   ],
   "source": [
    "def EQUAL_3(i, j):\n",
    "    assert(len(i) == len(j) == 3)\n",
    "    #TODO: Replace the body of this function to implement EQUAL_3 correctly\n",
    "\n",
    "    return 0\n",
    "\n",
    "assert(EQUAL_3((0,0,0),(0,0,0)))\n",
    "assert(EQUAL_3((0,0,1),(0,0,1)))\n",
    "assert(EQUAL_3((1,0,1),(1,0,1)))\n",
    "assert(not EQUAL_3((1,1,1),(0,0,0)))\n",
    "assert(not EQUAL_3((1,1,0),(0,0,0)))\n",
    "print(\"Huzzah!\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problem J3.** Implement the function `UPDATE_7` below, which will change the given index (given by the triple of bits `i`) of the 7-row table `T` to become the bit `b`. You will likely need `EQUAL_3` and `IF` to do this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GRRRRRREAT!!\n",
      "Fabulous\n",
      "Correct!\n",
      "You got it!\n"
     ]
    }
   ],
   "source": [
    "def UPDATE_7(T, b, i):\n",
    "    assert(len(T) == 7)\n",
    "    \n",
    "    #TODO: Replace the body of this function to implement UPDATE_7 correctly\n",
    "\n",
    "    t0 = 0\n",
    "    t1 = 0\n",
    "    t2 = 0\n",
    "    t3 = 0\n",
    "    t4 = 0\n",
    "    t5 = 0\n",
    "    t6 = 0\n",
    "    return (t0,t1,t2,t3,t4,t5,t6)\n",
    "\n",
    "\n",
    "\n",
    "def pseudo_update_7(T, b, i):\n",
    "    # This update works by manipulating indices directly. It is meant to show you what your update should return.\n",
    "    index = i[2] + 2*i[1] + 4*i[0]\n",
    "    return T[:index] + tuple([b]) + T[index+1:]\n",
    "\n",
    "T = (0,0,0,1,0,0,0)\n",
    "i= (0,1,1)\n",
    "assert(pseudo_update_7(T, 0, i) == UPDATE_7(T, 0, i))\n",
    "print(\"GRRRRRREAT!!\")\n",
    "T = (1,1,1,1,0,1,1)\n",
    "i = (1,0,0)\n",
    "assert(pseudo_update_7(T, 1, i) == UPDATE_7(T, 1, i))\n",
    "print(\"Fabulous\")\n",
    "T = (1,1,1,1,1,1,0)\n",
    "i = (1,1,0)\n",
    "assert(pseudo_update_7(T, 1, i) == UPDATE_7(T, 1, i))\n",
    "print(\"Correct!\")\n",
    "T = (1,0,0,0,0,0,0)\n",
    "i = (0,0,0)\n",
    "assert(pseudo_update_7(T, 0, i) == UPDATE_7(T, 0, i))\n",
    "print(\"You got it!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We finally have enough to implement our `EVAL_3_7_4_1` function!\n",
    "\n",
    "**Problem J4.** Implement `EVAL_3_7_4_1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "def EVAL_3_7_4_1(program, in0, in1, in2):\n",
    "    assert(len(program) == 4)\n",
    "    T = (0,0,0,0,0,0,0)\n",
    "    # TODO: fill in the body of this function.\n",
    "    return T[6]\n",
    "\n",
    "\n",
    "\n",
    "cond,a,b = 0,1,0 \n",
    "assert(EVAL_3_7_4_1(if_program, cond, a, b) == IF(cond,a,b))\n",
    "print(\"Gucci!\")\n",
    "\n",
    "cond,a,b = 1,1,0 \n",
    "assert(EVAL_3_7_4_1(if_program, cond, a, b) == IF(cond,a,b))\n",
    "print(\"Sweet!\")\n",
    "\n",
    "cond,a,b = 0,0,1 \n",
    "assert(EVAL_3_7_4_1(if_program, cond, a, b) == IF(cond,a,b))\n",
    "print(\"Cool Beans!\")\n",
    "\n",
    "cond,a,b = 1,0,1 \n",
    "assert(EVAL_3_7_4_1(if_program, cond, a, b) == IF(cond,a,b))\n",
    "print(\"You Rock!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we were to slightly modify our procedure for converting programs into a list of triples, we can use `EVAL_3_7_4_1` to evaluate any program that uses no more than 3 inputs, 7 variables, 4 lines, and 1 output. \n",
    "\n",
    "**Problem J5.** Write `OR` as a list of triples so that we can evaluate it using `EVAL_3_7_4_1` above. Note that `OR` requires fewer inputs, variables, and lines of code than `IF` does. You'll need to do something about that. You may use the `prog2bits` function we provided above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "you did it!!\n"
     ]
    }
   ],
   "source": [
    "or_program = [] # TODO: fill this in\n",
    "\n",
    "a,b = 0,0\n",
    "assert(EVAL_3_7_4_1(or_program, a, b, 0) == OR(a,b))\n",
    "a,b = 0,1\n",
    "assert(EVAL_3_7_4_1(or_program, a, b, 0) == OR(a,b))\n",
    "a,b = 1,0\n",
    "assert(EVAL_3_7_4_1(or_program, a, b, 0) == OR(a,b))\n",
    "a,b = 1,1\n",
    "assert(EVAL_3_7_4_1(or_program, a, b, 0) == OR(a,b))\n",
    "\n",
    "print(\"You did it!!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### End of Jupyter Notebook for Problem Set 4\n",
    "\n",
    "You should submit your completed notebook, as well as your PDF file created by modifying `ps4.tex` for PS4 in collab."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
